{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"em",
				"employer_id"
			],
			[
				"date",
				"datetime"
			],
			[
				"re",
				"request"
			],
			[
				"fo",
				"form"
			],
			[
				"rev",
				"review"
			],
			[
				"review",
				"reviews"
			],
			[
				"empl",
				"employer_id"
			],
			[
				"exe",
				"execute_sql"
			],
			[
				"employer",
				"employer_id"
			],
			[
				"di",
				"div\tTag"
			],
			[
				"res",
				"restaurant"
			],
			[
				"id",
				"id_number"
			],
			[
				"n",
				"name"
			],
			[
				"me",
				"messagecontent"
			],
			[
				"new",
				"newRestaurantName"
			],
			[
				"send",
				"send_header"
			],
			[
				"end",
				"end_headers"
			],
			[
				"c",
				"c"
			],
			[
				"db",
				"db"
			],
			[
				"que",
				"question_3"
			],
			[
				"qu",
				"question_2"
			],
			[
				"__",
				"__main__"
			],
			[
				"DB",
				"DBNAME"
			],
			[
				"pos",
				"posts"
			],
			[
				"co",
				"connect"
			],
			[
				"p",
				"psycopg2"
			],
			[
				"pa",
				"parse_qs"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/venv/bin/python3\nimport sqlite3\nimport datetime\nfrom flask import Flask, render_template, g, request, redirect, url_for\n\nPATH = ('db/jobs.sqlite')\n\napp = Flask(__name__) \n\ndef open_connection():\n\tconnection = getattr(g, '_connection', None)\n\tif connection == None:\n\t\tconnection = g._connection = sqlite3.connect(PATH)\n\t\tconnection.row_factory = sqlite3.Row\n\t\treturn connection\n\ndef execute_sql(sql, values=(), commit=False, single=False):\n\tconnection = open_connection()\n\tcursor = connection.execute(sql, values)\n\tif commit == True:\n\t\tresults = connection.commit()\n\telse:\n\t\tresults = cursor.fetchone() if single else cursor.fetchall()\n\n\tcursor.close()\n\treturn results\n\n@app.teardown_appcontext\ndef close_connection(exception):\n\tconnection = getattr(g, '_connection', None)\n\tif connection is not None:\n\t\tconnection.close()\n\n\n@app.route('/')\n@app.route('/jobs')\ndef jobs():\n\tjobs = execute_sql('SELECT job.id, job.title, job.description, job.salary, employer.id as employer_id, employer.name as employer_name FROM job JOIN employer ON employer.id = job.employer_id')\n\texecute_sql = jobs()\n\treturn render_template('index.html', jobs=jobs)\n\n@app.route('/job/<job_id>')\ndef job(job_id):\n\tjob = execute_sql('SELECT job.id, job.title, job.description, job.salary, employer.id as employer_id, employer.name as employer_name FROM job JOIN employer ON employer.id = job.employer_id WHERE job.id = ?', [job_id], single=True)\n\treturn render_template('job.html', job=job)\n\n@app.route('/employer/<employer_id>')\ndef employer(employer_id):\n\temployer = execute_sql('SELECT * FROM employer WHERE id = ?', [employer_id], single=True)\n\tjobs = execute_sql('SELECT job.id, job.title, job.description, job.salary FROM job JOIN employer ON employer.id = job.employer_id WHERE employer.id = ?', [employer_id])\n\treviews = execute_sql('SELECT review, rating, title, date, status FROM review JOIN employer ON employer.id = review.employer_id WHERE employer.id = ?', [employer_id])\n\treturn render_template('employer.html', employer=employer, jobs=jobs, reviews=reviews)\n\n@app.route('/employer/<employer_id>/review', methods=('GET', 'POST'))\ndef review(employer_id):\n\tif request.method == 'POST':\n\t\treview = request.form['review']\n\t\trating = request.form['rating']\n\t\ttitle = request.form['title']\n\t\tstatus = request.form['status']\n\n\t\tdate = datetime.datetime.now().strftime(\"%m/%d/%Y\")\n\t\texecute_sql('INSERT INTO review (review, rating, title, date, status, employer_id) VALUES (?, ?, ?, ?, ?, ?)', (review, rating, title, date, status, employer_id), commit=True)\n\t\treturn redirect(url_for('employer', employer_id=employer_id))\n\treturn render_template('review.html', employer_id=employer_id)\n\t\n\t\n",
			"file": "jobs/app.py",
			"file_size": 2670,
			"file_write_time": 131885383166583518,
			"settings":
			{
				"buffer_size": 2670,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "tasks.md",
			"settings":
			{
				"buffer_size": 21255,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/fullstack/Desktop/pluralsight",
		"/Users/fullstack/Desktop/pluralsight/jobs"
	],
	"file_history":
	[
		"/Users/fullstack/Desktop/pluralsight/jobs/templates/review.html",
		"/Users/fullstack/Desktop/pluralsight/jobs/app.py",
		"/Users/fullstack/Desktop/pluralsight/jobs/templates/_macros.html",
		"/Users/fullstack/Desktop/pluralsight/jobs/templates/employer.html",
		"/Users/fullstack/Desktop/webserver.py",
		"/Users/fullstack/Desktop/L2O1Answer.py",
		"/Users/fullstack/Desktop/L2O2Answer.py",
		"/Users/fullstack/Desktop/L2O3Answer.py",
		"/Users/fullstack/Desktop/L2O4Answer",
		"/Users/fullstack/Desktop/lesson 4/fullstack/vagrant/lesson4/webserver.py",
		"/Users/fullstack/Desktop/lesson 4/fullstack/vagrant/lesson4/lotsofmenus.py",
		"/Users/fullstack/Desktop/lesson 4/fullstack/vagrant/lesson4/database_setup.py",
		"/Users/fullstack/Desktop/database_setup.py",
		"/Users/fullstack/Desktop/hello udacity wsgi",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/news/newsserver.py",
		"/Users/fullstack/Desktop/play.py",
		"/Users/fullstack/Library/Mobile Documents/com~apple~CloudDocs/Udacity Full Stack/Udacity Projects/project1/newsserver.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/news/README.md",
		"/Users/fullstack/Desktop/README.md",
		"/Users/fullstack/Desktop/Project1.md",
		"/Users/fullstack/Desktop/project 1 answers.txt",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/forum/forum.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/news/news.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/news/newsdb.py",
		"/Users/fullstack/Desktop/udacity-git-course/course-ud303/Lesson-2/0_HelloServer/HelloServer.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/forum/solution/forum.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/forum/forumdb.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/news/forumdb.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/news/forum.py",
		"/Users/fullstack/Desktop/vagrant/FSND-Virtual-Machine/vagrant/forum/solution/forumdb_stepone.py",
		"/Users/fullstack/Desktop/play.html",
		"/Users/fullstack/Desktop/udacity-git-course/course-ud303/Lesson-2/3_MessageboardPartOne/MessageboardPartOne.py",
		"/Users/fullstack/Desktop/udacity-git-course/course-ud303/Lesson-2/3_MessageboardPartOne/Messageboard.html",
		"/Users/fullstack/Desktop/udacity-git-course/course-ud303/Lesson-2/1_EchoServer/EchoServer.py",
		"/Users/fullstack/Desktop/udacity-git-course/course-ud303/Lesson-2/2_HTMLForms/PostForm.html",
		"/Users/fullstack/Desktop/udacity-git-course/course-collaboration-travel-plans/index.html",
		"/Users/fullstack/Desktop/udacity-git-course/course-collaboration-travel-plans/.git/COMMIT_EDITMSG",
		"/Users/fullstack/Desktop/udacity-git-course/my-travel-plans/app.css",
		"/Users/fullstack/Desktop/udacity-git-course/my-travel-plans/index.html",
		"/Users/fullstack/Desktop/udacity-git-course/my-travel-plans/README.md",
		"/Users/fullstack/Desktop/udacity-git-course/new-git-project/.git/COMMIT_EDITMSG",
		"/Users/fullstack/Desktop/udacity-git-course/new-git-project/index.html",
		"/Users/fullstack/Desktop/udacity-git-course/new-git-project/.git/MERGE_MSG",
		"/Users/fullstack/Desktop/udacity-git-course/new-git-project/css/app.css",
		"/Users/fullstack/Desktop/udacity-git-course/new-git-project/.git/TAG_EDITMSG",
		"/Users/fullstack/Desktop/udacity-git-course/new-git-project/app.css",
		"/Users/fullstack/Desktop/udacity-git-course/new-git-project/app.js",
		"/Users/fullstack/Desktop/udacity-git-course/course-git-blog-project/index.html"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"employer",
			"myRest",
			".first",
			"myRes",
			"restaurant.",
			"id_"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/fullstack/Desktop/pluralsight"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "jobs/app.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2670,
						"regions":
						{
						},
						"selection":
						[
							[
								441,
								441
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 26.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "tasks.md",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 21255,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 219.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
